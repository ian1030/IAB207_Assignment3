from flask import Blueprint, flash, render_template, request, redirect, url_for
from .models import Event, User
from .forms import EventForm
from flask_login import login_required, current_user
from . import db
from datetime import datetime

eventbp = Blueprint('event', __name__, url_prefix='/events')

@eventbp.route('/create', methods=['GET', 'POST'])
@login_required
def create_event():
    form = EventForm()
    if form.validate_on_submit():
        event_name = form.event_name.data
        event_location = form.event_location.data
        event_date = form.event_date.data
        event_time = form.event_time.data
        event_description = form.event_description.data
        event_category = form.event_category.data
        event_image = form.event_image.data
        event_ticket_quantity = form.event_ticket_quantity.data
        event_ticket_price = form.event_ticket_price.data

        event_status = 'Open'  # Initial state of the event

        new_event = Event(
            event_name=event_name,
            event_location=event_location,
            event_date=event_date,
            event_time=event_time,
            event_description=event_description,
            event_category=event_category,
            event_image=event_image,
            event_ticket_quantity=event_ticket_quantity,
            event_ticket_price=event_ticket_price,
            event_status=event_status,
            user=current_user
        )

        db.session.add(new_event)
        db.session.commit()

        flash('Event created successfully!', 'success')
        return redirect(url_for('event.show', event_id=new_event.id))

    return render_template('event/create.html', form=form)


@eventbp.route('/<int:event_id>', methods=['GET', 'POST'])
def show(event_id):
    event = Event.query.get(event_id)
    if not event:
        flash('Event not found', 'error')
        return redirect(url_for('main.index'))

    return render_template('event/show.html', event=event)


@eventbp.route('/<int:event_id>/update', methods=['GET', 'POST'])
@login_required
def update(event_id):
    event = Event.query.get(event_id)
    if not event:
        flash('Event not found', 'error')
        return redirect(url_for('main.index'))

    if event.user != current_user:
        flash('You do not have permission to update this event', 'error')
        return redirect(url_for('event.show', event_id=event.id))

    form = EventForm(obj=event)
    if form.validate_on_submit():
        event.event_name = form.event_name.data
        event.event_location = form.event_location.data
        event.event_date = form.event_date.data
        event.event_time = form.event_time.data
        event.event_description = form.event_description.data
        event.event_category = form.event_category.data
        event.event_image = form.event_image.data
        event.event_ticket_quantity = form.event_ticket_quantity.data
        event.event_ticket_price = form.event_ticket_price.data

        db.session.commit()

        flash('Event updated successfully!', 'success')
        return redirect(url_for('event.show', event_id=event.id))

    return render_template('event/update.html', form=form, event=event)


@eventbp.route('/<int:event_id>/cancel', methods=['POST'])
@login_required
def cancel(event_id):
    event = Event.query.get(event_id)
    if not event:
        flash('Event not found', 'error')
        return redirect(url_for('main.index'))

    if event.user != current_user:
        flash('You do not have permission to cancel this event', 'error')
        return redirect(url_for('event.show', event_id=event.id))

    event.event_status = 'Cancelled'
    db.session.commit()

    flash('Event cancelled successfully!', 'success')
    return redirect(url_for('event.show', event_id=event.id))
